#!/usr/bin/env perl

# house -- server for birdhouse

use Mojolicious::Lite;
use Mojo::JSON;

$ENV{MOJO_INACTIVITY_TIMEOUT} = 60 * 60;

app->secret(rand 1);
app->log->level('debug');

# client connects to /door and says hello
my %birds;
my $j = Mojo::JSON->new();
sub wall {
    my $msg = shift;
    #app->log->debug("sending msg $msg->{msg}");
    $_->send($j->encode($msg)) for values %birds;
}
websocket '/door' => sub {
    my $c = shift;
    $c->on(message =>
        sub {
            my ( $c, $msg ) = @_;

            $msg =~ /hello, i am (.*)$/
              or return $c->app->debug("invalid greeting '$msg'");
            my $id = $1;
            return $c->app->debug('reserved id "server"')
               if $id eq 'server'; # reserved
            $c->app->log->debug("connect from $id");
            $birds{$id} = $c->tx;
            $c->tx->send( $j->encode({id => 'server', birds => [keys %birds]}) );
            $c->on(finish =>
                sub {
                    $c->app->log->debug("disconnect from $id");
                    delete $birds{$id};
                    wall { id => 'server', msg => "$id has left", birds => [keys %birds] };
                }
            );
            wall { id => 'server', msg => "$id has joined", birds => [keys %birds] };
            $c->tx->unsubscribe('message');
            $c->tx->on(message =>
                sub {
                    my ( $tx, $msg ) = @_;
                    wall { id => $id, msg => $msg };
                }
            );
        }
    );
};
Mojo::IOLoop->recurring(10 => sub {
        app->log->debug("Connections : ".keys %birds);
    } );

app->start;

__DATA__
@@ exception.html.ep
ERROR : <%== stash 'exception' %>

@@ not_found.html.ep
NOT FOUND : <%== $self->req->url->path %>
